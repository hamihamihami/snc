1)ceaser
#include <stdio.h>
#include <ctype.h>

void encrypt(char text[], int key) {
    char ch;
    int i;
    for (i = 0; text[i] != '\0'; ++i) {
        ch = text[i];
        if (isalnum(ch)) {
            if (islower(ch)) {
                ch = (ch - 'a' + key) % 26 + 'a';
            }
            if (isupper(ch)) {
                ch = (ch - 'A' + key) % 26 + 'A';
            }
            if (isdigit(ch)) {
                ch = (ch - '0' + key) % 10 + '0';
            }
        } else {
            printf("Invalid Message");
        }
        text[i] = ch;
    }
}

void decrypt(char text[], int key) {
    char ch,i;
    for (i = 0; text[i] != '\0'; ++i) {
        ch = text[i];
        if (isalnum(ch)) {
            if (islower(ch)) {
                ch = (ch - 'a' - key + 26) % 26 + 'a';
            }
            if (isupper(ch)) {
                ch = (ch - 'A' - key + 26) % 26 + 'A';
            }
            if (isdigit(ch)) {
                ch = (ch - '0' - key + 10) % 10 + '0';
            }
        } else {
            printf("Invalid Message");
        }
        text[i] = ch;
    }
}

int main() {
    char text[500];
    int key;

    printf("Enter a message to encrypt/decrypt: ");
    scanf("%s", text);

    printf("Enter the key: ");
    scanf("%d", &key);

    // Encrypting the message
    encrypt(text, key);
    printf("Encrypted message: %s\n", text);

    // Decrypting the message
    decrypt(text, key);
    printf("Decrypted message: %s\n", text);

    return 0;
}
2)playfair
#include<stdio.h>
#include<string.h>

#define M 30

char keyM[5][5],loc[2],pt[M],key[M];
void keyMT();
int search(char);
void encrypt();

void main(){
	int i,j;
	printf("\n enter plain text:");
	scanf("%s",pt);
	printf("\n enter key:");
	scanf("%s",key);
	for(i=0;pt[i]!='\0';i+=2){
		if(pt[i]==pt[i+1]){
			for(j=strlen(pt);j>i;j--){
				pt[j]=pt[j-1];
			}
			pt[i+1]='x';
		}
	}
	if(strlen(pt)%2!=0){
		pt[strlen(pt)]='z';
	}
	keyMT(key);
	for(i=0;i<5;i++){
		for(j=0;j<5;j++){
			printf("%c",keyM[i][j]);
		}
		printf("\n");
	}
	encrypt();
	printf("\n encrypted code:");
	printf("%s\n",pt);
}

void keyMT(){
	int i,j,t=0;
	char ch='a';
	for(i=0;i<5;i++){
		for(j=0;j<5;j++){
			if(key[t]!='\0'){
				if(!search(key[t])){
					if(key[t]=='j'){
						key[t]='i';
					}
					keyM[i][j]=key[t];
				}
				else j--;
				t++;
			}
			else{
				if(!search(ch)&ch!='j'){
					keyM[i][j]=ch;
				}
				else j--;
				ch++;
			}
		}
	}
}

int search(char ch){
	int i,j;
	for(i=0;i<5;i++){
		for(j=0;j<5;j++){
			if(keyM[i][j]==ch){
				loc[0]=i;
				loc[1]=j;
				return 1;
			}
		}
	}
	return 0;
}

void encrypt(){
	int i;
	int x[2],y[2];
	for(i=0;pt[i]!='\0';i+=2){
		if(search(pt[i])){
			x[0]=loc[0];
			x[1]=loc[1];
		}
		if(search(pt[i+1])){
			y[0]=loc[0];
			y[1]=loc[1];
		}

		if(x[1]==y[1]){
			pt[i]=keyM[(x[0]+1)%5][x[1]];
			pt[i+1]=keyM[(y[0]+1)%5][y[1]];
		}
		else if(x[0]==y[0]){
			pt[i]=keyM[x[0]][(x[1]+1)%5];
			pt[i+1]=keyM[y[0]][(y[1]+1)%5];
		}
		else{
			pt[i]=keyM[x[0]][y[1]];
			pt[i+1]=keyM[y[0]][x[1]];
		}
	}

}
3)hill
#include<stdio.h>
#include<string.h>

void main(){
	int i,j,s,t=0;
	char text[300],key[300];
	printf("\n enter msg:");
	scanf("%s",text);
	printf("\n enter key:");
	scanf("%s",key);
	s=strlen(text);
	int km[s][s],msg[s];
	char enc[s];
	for(i=0;i<s;i++){
		for(j=0;j<s;j++){
			km[i][j]=key[t++]-65;
		}
	}
	for(i=0;i<s;i++) msg[i]=text[i]-65;
	for(i=0;i<s;i++){
		t=0;
		for(j=0;j<s;j++){
			t+=km[i][j]*msg[j];
		}
		enc[i]=(t%26)+65;
	}
	enc[i]='\0';
	printf("encrypted msg:");
	printf("%s",enc);
	//for(i=0;i<s;i++) printf("%c",enc[i]);
}
4)vigenere
#include<stdio.h>
#include<string.h>

void main(){
	char test[30],key[30];
	printf("\n enter msg:");
	scanf("%s",test);
	printf("\n enter key:");
	scanf("%s",key);
	int ms=strlen(test),ks=strlen(key),i,j;
	char nmsg[ms],encrypt[ms],decrypt[ms];
	for(i=0,j=0;i<ms;i++,j++){
		if(j==ks) j=0;
		nmsg[i]=key[j];
	}
	//encrypt
	nmsg[i]='\0';
	for(i=0;i<ms;i++){
		encrypt[i]=(test[i]+nmsg[i])%26+'A';
	}
	encrypt[i]='\0';
	for(i=0;i<ms;i++){
		decrypt[i]=(encrypt[i]-nmsg[i])%26+'A';
	}
	decrypt[i]='\0';
	printf("\n encrypted msg:");
	printf("%s",encrypt);
	printf("\n decrypted msg:");
	printf("%s" ,decrypt);
}
5)rail
#include<stdio.h>
#include<string.h>

void main(){
	int i,j=0,s,rail;
	char text[60];
	printf("Enter text:");
	gets(text);
	printf("Enter rails:");
	scanf("%d",&rail);
	//printf("%d\n",rail);
	s=strlen(text);
	//printf("%d",s);
	char key[rail][s];
	int count=0;
	for(i=0;i<rail;i++){
		for(j=0;j<s;j++){
			key[i][j]='0';
		}
	}
	j=0;
	while(j<s){
		if(count%2==0){
			for(i=0;i<rail;i++){
				key[i][j]=text[j];
				j++;
			}
		}
		else{
			for(i=rail-2;i>0;i--){
				key[i][j]=text[j];
				j++;
			}
		}
		count++;
	}
	for(i=0;i<rail;i++){
		for(j=0;j<s;j++){	 
			if(key[i][j]!='0') printf("%c",key[i][j]);	
		}
	}

}	
6)deffie-hellman
/* This program calculates the Key for two persons
using the Diffie-Hellman Key exchange algorithm */
#include <math.h>
#include <stdio.h>

// Power function to return value of a ^ b mod P
long long int power(long long int a, long long int b,
					long long int P)
{
	if (b == 1)
		return a;

	else
		return (((long long int)pow(a, b)) % P);
}

// Driver program
int main()
{
	long long int P, G, x, a, y, b, ka, kb;

	// Both the persons will be agreed upon the
	// public keys G and P
	P = 23; // A prime number P is taken
	printf("The value of P : %lld\n", P);

	G = 9; // A primitive root for P, G is taken
	printf("The value of G : %lld\n\n", G);

	// Alice will choose the private key a
	a = 4; // a is the chosen private key
	printf("The private key a for Alice : %lld\n", a);
	x = power(G, a, P); // gets the generated key

	// Bob will choose the private key b
	b = 3; // b is the chosen private key
	printf("The private key b for Bob : %lld\n\n", b);
	y = power(G, b, P); // gets the generated key

	// Generating the secret key after the exchange
	// of keys
	ka = power(y, a, P); // Secret key for Alice
	kb = power(x, b, P); // Secret key for Bob

	printf("Secret key for the Alice is : %lld\n", ka);
	printf("Secret Key for the Bob is : %lld\n", kb);

	return 0;
}
7)hamc
import hmac 
import hashlib   
# creating new hmac object using sha1 hash algorithm 
digest_maker = hmac.new(b'secret-key', b'msg', hashlib.sha1)   
# print the Hexdigest of the bytes passed to update 
print ("Hexdigest: " + digest_maker.hexdigest())  
# call update to update msg 
digest_maker.update(b'another msg')  
# print the Hexdigest of the bytes passed to update 
print ("Hexdigest after update: " + digest_maker.hexdigest()) 
print ("Digest size: " + str(digest_maker.digest_size) + " bytes") 
print ("Block size: " + str(digest_maker.block_size) + " bytes") 
print ("Canonical name: " + digest_maker.name) 
# print the digest of the bytes passed to update 
print ("Digest: ", end =" ") 
print (digest_maker.digest()) 
# create a copy of the hmac object 
digest_clone = digest_maker.copy() 
print ("Hexdigest of clone: " + digest_clone.hexdigest())
8)password
import string
import secrets

def generate_password(length=12):
    # Define the characters to use in the password
    characters = string.ascii_letters + string.digits + string.punctuation

    # Generate a password using the specified length
    password = ''.join(secrets.choice(characters) for _ in range(length))
    return password

# Example usage
password = generate_password()
print("Generated Password:", password)